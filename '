#ifndef ALGORIiteratorHMS
#define ALGORIiteratorHMS 
#include <algorithm>
#include <cstddef>
#include <iterator>
#include <iostream>

namespace sl {

    template<typename iterator>
    void bubble_sort(const iterator& _first,const iterator& _last) {
        for (iterator itr1 = _first; itr1 != _last; itr1++)
            for (iterator itr2 = _first; itr2 != (_last-1); itr2++)
                if (*itr2 > *(itr2 + 1))
                    std::iter_swap(itr2, itr2 + 1);
    }

    template<typename iterator, typename Comp>
    void bubble_sort(const iterator& _first, const iterator& _last, Comp _comp) {
        for (iterator itr1 = _first; itr1 != _last; itr1++)
            for (iterator itr2 = _first; itr2 != (_last-1); itr2++)
                if (_comp(*itr2, *(itr2 + 1)))
                    std::iter_swap(itr2, itr2 +1);
    }
    
    template<class iterator>
    void insertion_sort(iterator _first, iterator _last) {
        iterator i = _first;
        for (i = ++i; i != _last; i++) {
            typename std::iterator_traits<iterator>::value_type key = *i;
            iterator j = i;
            while (j != _first && *(std::prev(j)) > key) {
                *j = *(std::prev(j));
                --j;
            }
            *j = key;
        }
    }

    template<typename iterator, typename Comp>
    void insertion_sort(const iterator& _first, const iterator& _last, Comp _comp) {
        iterator i = _first;
        for (i = ++i; i != _last; i++) {
            typename std::iterator_traits<iterator>::value_type key = *i;
            iterator j = i;
            while (j != _first && _comp(*(std::prev(j)), key)) {
                *j = *(std::prev(j));
                --j;
            }
            *j = key;
        }
    }

    template<typename iterator>
    void selection_sort(const iterator& _first,const iterator& _last) {
        for (iterator i = _first; i != _last; i++) {
            iterator min_itr = i, j = i;
            typename std::iterator_traits<iterator>::value_type temp = *i;
            for (j = ++j; j != _last; j++)
                if (*j < *min_itr)
                    min_itr = j;
            *i = *min_itr;
            *min_itr = temp;
        }
    }

    template<typename iterator, typename Comp>
    void selection_sort(const iterator& _first,const iterator& _last, Comp _comp) {
        for (iterator i = _first; i != _last; i++) {
            iterator key = i, j = i;
            typename std::iterator_traits<iterator>::value_type temp = *i;
            for (j = ++j; j != _last; j++)
                if (_comp(*key, *j))
                    key = j;
            *i = *key;
            *key = temp;
        }
    }
    
};

#endif
